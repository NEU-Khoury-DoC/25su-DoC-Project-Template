


import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression
import seaborn as sns

from hdi import download_hdi_data
from educationSpending import fetch_worldbank_data_json

hdi_df = download_hdi_data()
education_df = fetch_worldbank_data_json()


year_columns = ['1990', '2010', '2015', '2020', '2021', '2022', '2023']
hdi_melted = pd.melt(hdi_df, 
                     id_vars=['Country'], 
                     value_vars=year_columns,
                     var_name='Year', 
                     value_name='HDI')

hdi_melted['Year'] = pd.to_numeric(hdi_melted['Year'])
hdi_melted = hdi_melted.dropna(subset=['HDI'])

# clean education data
education_clean = education_df.rename(columns={'Country Name': 'Country'})
education_clean = education_clean.dropna(subset=['Value'])


merged_data = pd.merge(hdi_melted, 
                      education_clean[['Country', 'Year', 'Value']], 
                      on=['Country', 'Year'], 
                      how='inner')
merged_data = merged_data.rename(columns={'Value': 'Education_Expenditure'})


available_years = sorted(merged_data['Year'].unique())
print(f"Years with both HDI and Education data: {available_years}")


for year in available_years:
    f, ax = plt.subplots()
    

    year_data = merged_data[merged_data['Year'] == year].copy()
    year_data = year_data.reset_index(drop=True)
    
    label = 'Education_Expenditure'
    

    ax.plot(year_data[label], 'o', color='black', markersize=10)
    ax.set_title(f'Education Expenditure - {int(year)}', fontsize=16, fontweight='bold')
    ax.set_xlabel('Country', fontsize=14)
    ax.grid(True)
    
    mean_value = year_data[label].mean()
    ax.axhline(mean_value, color='tab:green', ls=':', lw=4)
    

    ax.annotate(xy=(year_data.shape[0]-0.75, mean_value+0.125), 
               text='sample mean',
               ha='right', fontsize=12, color='tab:green')
    

    y_min = year_data[label].min() - 0.5
    y_max = year_data[label].max() + 0.75
    ax.set_ylim([y_min, y_max])
    
    for idx, el in enumerate(year_data[label]):
        ax.plot([idx, idx], [mean_value, el], lw=4, ls='--', color='tab:red')
    
    ax.set_ylabel('Education Expenditure (% of GDP)', fontsize=14)
    f.set_size_inches(12, 6)
    
    plt.tight_layout()
    plt.show()